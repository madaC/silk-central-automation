def agentLabel = ""
pipeline{
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    parameters {
        string(name: 'testsToRun', description: '' )
        string(name: 'testsToRunConverted', description: '' )
        string(name: 'suiteId',description: '' )
        string(name: 'suiteRunId',description: '' )
    }

    stages {

        stage('setTag') {

            steps {
                dir('test-execution') {
                    bat 'npm install'
                    bat 'npm run build'
                    bat 'echo getting execution keywords from the test suite'
                    bat 'npm run start-init-execution-keywords %suiteId%"'
                    script {
                          agentLabel = readFile('execution_keywords.txt').trim()
                    }
                }

            }
        }

        stage('Run Tests') {
            agent{
                label agentLabel
            }
            steps {
                convertTestsToRun format:'', framework: 'mvnSurefire'
                script {
                    withCredentials([usernamePassword(credentialsId: '', usernameVariable: 'dbUser', passwordVariable: 'dbPassword'),
                                     usernamePassword(credentialsId: '', usernameVariable: 'STWUser', passwordVariable: 'STWPassword')]) {
                        dir('test-execution') {
                            bat 'npm install'
                            bat 'npm run build'
                            bat 'call echo "generating executable file..."'
                            bat 'call npm run start-stw "%testsToRunConverted%" %suiteId% %suiteRunId% %dbUser% %dbPassword% %STWUser% %STWPassword%'
                            try {
                                bat 'call echo "running tests..."'
                                bat 'call command_to_execute.bat'
                            } catch(err) {
                                bat 'echo Tests failed! Continue...'
                            }
                            bat 'call echo "converting Silk Test Workbench results to Octane expected format..."'
                            bat 'call npm run start-test-results-conversion'
                        }

                    }
                }
                archiveArtifacts artifacts: 'test-execution/command_to_execute.bat,test-execution/testResults/**', onlyIfSuccessful: false
                junit allowEmptyResults: true, testResults: '**/Results.xml'

            }

        }

    }
    post {
        always {
            node(agentLabel) {
              cleanWs()
            }
            cleanWs()
        }
    }

}
