def agentLabel = ""
pipeline{
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
    }
    parameters {
        string(name: 'testsToRun', description: '' )
        string(name: 'testsToRunConverted',description: '' )
        string(name: 'suiteId',description: '' )
        string(name: 'suiteRunId',description: '' )
       }

    stages {

          stage('setTag') {

              steps {
                  dir('test-execution') {
                      bat 'npm install'
                      bat 'npm run build'
                      bat 'echo getting execution keywords from the test suite'
                      bat 'npm run start-init-execution-keywords %suiteId%"'
                      script {
                            agentLabel = readFile('execution_keywords.txt').trim()
                      }
                  }

              }
          }


        stage('Run Tests') {
            agent{
                label agentLabel
            }
            steps {
                convertTestsToRun format:'', framework: 'uft'
                script {
                    withCredentials([usernamePassword(credentialsId: '6cfdfdfd-819b-49cb-9b55-64b7c444326b', usernameVariable: 'username', passwordVariable: 'password')]) {
                        dir('test-execution') {
                            bat 'npm install'
                            bat 'npm run build'
                            bat 'echo "fetching tests resources..."'
                            bat """npm run start-uft "${testsToRunConverted.replaceAll('\\R\\n','').replaceAll('\"','\'').replaceAll('FTToolsLauncher\\\\','')}" %suiteId% %suiteRunId% %username% %password%"""
                            bat 'echo "running tests..."'
                            bat 'powershell ./UFTExecutorJenkins.ps1'
                        }

                    }
                }
                archiveArtifacts artifacts: 'test-execution/build/**, test-execution/testResults/** ', onlyIfSuccessful: false
                junit allowEmptyResults: true, testResults: '**/Results.xml'

            }

        }

    }
    post {
        always {
            node(agentLabel) {
                cleanWs()
            }
            cleanWs()
        }
    }

}
